/*Посредник — это поведенческий паттерн проектирования, который позволяет уменьшить связанность множества классов между собой, благодаря перемещению этих связей в один класс-посредник.

Паттерн Посредник заставляет объекты общаться не напрямую друг с другом, а через отдельный объект-посредник, который знает, кому нужно перенаправить тот или иной запрос. 
Благодаря этому, компоненты системы будут зависеть только от посредника, а не от десятков других компонентов.

ПРИМЕНЯТЬ:
1. Когда вам сложно менять некоторые классы из-за того, что они имеют множество хаотичных связей с другими классами.
Посредник позволяет поместить все эти связи в один класс, после чего вам будет легче их отрефакторить, сделать более понятными и гибкими.

2. Когда вы не можете повторно использовать класс, поскольку он зависит от уймы других классов.
После применения паттерна компоненты теряют прежние связи с другими компонентами, а всё их общение происходит косвенно, через объект-посредник.

3/ Когда вам приходится создавать множество подклассов компонентов, чтобы использовать одни и те же компоненты в разных контекстах.
Если раньше изменение отношений в одном компоненте могли повлечь за собой лавину изменений во всех остальных компонентах, то теперь вам достаточно создать подкласс посредника и поменять в нём связи между компонентами.


Нужен, чтобы уменьшить связанность классов между собой
*/ 

//Ex1

const AppointmentCreateClass = require('./AppointmentCreate')
const UserClass = require('./User')


const appointmentMediator = new AppointmentCreateClass()

const FirstUser = new UserClass('Даниил', 'Андреев', appointmentMediator)
const SecondUser = new UserClass('Алексей', 'Иванов', appointmentMediator)
const ThirdUser = new UserClass('Иван', 'Петров', appointmentMediator)


FirstUser.makeAppointments()
SecondUser.makeAppointments()
ThirdUser.makeAppointments()


console.log(appointmentMediator.getAppointmentsList())